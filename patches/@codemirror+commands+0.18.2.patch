diff --git a/node_modules/@codemirror/commands/dist/index.cjs b/node_modules/@codemirror/commands/dist/index.cjs
index 486b11c..35d051e 100644
--- a/node_modules/@codemirror/commands/dist/index.cjs
+++ b/node_modules/@codemirror/commands/dist/index.cjs
@@ -524,28 +524,45 @@ function selectedLineBlocks(state) {
     let blocks = [], upto = -1;
     for (let range of state.selection.ranges) {
         let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
-        if (upto == startLine.number)
-            blocks[blocks.length - 1].to = endLine.to;
-        else
-            blocks.push({ from: startLine.from, to: endLine.to });
-        upto = endLine.number;
+        if (!range.empty && range.to == endLine.from)
+            endLine = state.doc.lineAt(range.to - 1);
+        if (upto >= startLine.number) {
+            let prev = blocks[blocks.length - 1];
+            prev.to = endLine.to;
+            prev.ranges.push(range);
+        }
+        else {
+            blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
+        }
+        upto = endLine.number + 1;
     }
     return blocks;
 }
-function moveLine(state, dispatch, forward) {
-    let changes = [];
-    for (let block of selectedLineBlocks(state)) {
-        if (forward ? block.to == state.doc.length : block.from == 0)
+function moveLine(state$1, dispatch, forward) {
+    let changes = [], ranges = [];
+    for (let block of selectedLineBlocks(state$1)) {
+        if (forward ? block.to == state$1.doc.length : block.from == 0)
             continue;
-        let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
-        if (forward)
-            changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
-        else
-            changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
+        let nextLine = state$1.doc.lineAt(forward ? block.to + 1 : block.from - 1);
+        let size = nextLine.length + 1;
+        if (forward) {
+            changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state$1.lineBreak });
+            for (let r of block.ranges)
+                ranges.push(state.EditorSelection.range(Math.min(state$1.doc.length, r.anchor + size), Math.min(state$1.doc.length, r.head + size)));
+        }
+        else {
+            changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state$1.lineBreak + nextLine.text });
+            for (let r of block.ranges)
+                ranges.push(state.EditorSelection.range(r.anchor - size, r.head - size));
+        }
     }
     if (!changes.length)
         return false;
-    dispatch(state.update({ changes, scrollIntoView: true }));
+    dispatch(state$1.update({
+        changes,
+        scrollIntoView: true,
+        selection: state.EditorSelection.create(ranges, state$1.selection.mainIndex)
+    }));
     return true;
 }
 /**
@@ -798,16 +815,16 @@ property changed to `mac`.)
  - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
 */
 const standardKeymap = [
-    { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft },
+    { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
     { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft },
     { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
-    { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight },
+    { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
     { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight },
     { mac: "Cmd-ArrowRight", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
-    { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp },
+    { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
     { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
     { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
-    { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown },
+    { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
     { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
     { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
     { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
diff --git a/node_modules/@codemirror/commands/dist/index.js b/node_modules/@codemirror/commands/dist/index.js
index 1225c1c..e338beb 100644
--- a/node_modules/@codemirror/commands/dist/index.js
+++ b/node_modules/@codemirror/commands/dist/index.js
@@ -520,28 +520,45 @@ function selectedLineBlocks(state) {
     let blocks = [], upto = -1;
     for (let range of state.selection.ranges) {
         let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
-        if (upto == startLine.number)
-            blocks[blocks.length - 1].to = endLine.to;
-        else
-            blocks.push({ from: startLine.from, to: endLine.to });
-        upto = endLine.number;
+        if (!range.empty && range.to == endLine.from)
+            endLine = state.doc.lineAt(range.to - 1);
+        if (upto >= startLine.number) {
+            let prev = blocks[blocks.length - 1];
+            prev.to = endLine.to;
+            prev.ranges.push(range);
+        }
+        else {
+            blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
+        }
+        upto = endLine.number + 1;
     }
     return blocks;
 }
 function moveLine(state, dispatch, forward) {
-    let changes = [];
+    let changes = [], ranges = [];
     for (let block of selectedLineBlocks(state)) {
         if (forward ? block.to == state.doc.length : block.from == 0)
             continue;
         let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
-        if (forward)
+        let size = nextLine.length + 1;
+        if (forward) {
             changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
-        else
+            for (let r of block.ranges)
+                ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
+        }
+        else {
             changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
+            for (let r of block.ranges)
+                ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
+        }
     }
     if (!changes.length)
         return false;
-    dispatch(state.update({ changes, scrollIntoView: true }));
+    dispatch(state.update({
+        changes,
+        scrollIntoView: true,
+        selection: EditorSelection.create(ranges, state.selection.mainIndex)
+    }));
     return true;
 }
 /**
@@ -794,16 +811,16 @@ property changed to `mac`.)
  - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
 */
 const standardKeymap = /*@__PURE__*/[
-    { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft },
+    { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
     { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft },
     { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
-    { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight },
+    { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
     { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight },
     { mac: "Cmd-ArrowRight", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
-    { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp },
+    { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
     { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
     { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
-    { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown },
+    { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
     { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
     { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
     { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
